<class>
<keyword> class </keyword>
<identifier>
<value> Keyboard <value>
<category> class <category>
</identifier>
<symbol> { </symbol>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier>
<value> init <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier>
<value> keyPressed <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier>
<value> Memory <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> peek <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 24576 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier>
<value> readChar <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier>
<value> key <value>
<category> var </category>
<defined> defined <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> , </symbol>
<identifier>
<value> c <value>
<category> var </category>
<defined> defined <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier>
<value> Output <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> printChar <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<value> key <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<value> key <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<value> key <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<value> Keyboard <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> keyPressed <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<value> c <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<value> key <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier>
<value> Output <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> backSpace <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier>
<value> Output <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> printChar <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier>
<value> c <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<value> key <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<value> key <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<value> Keyboard <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> keyPressed <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier>
<value> c <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<identifier>
<value> String <value>
<category> class <category>
</identifier>
<identifier>
<value> readLine <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<parameterList>
<identifier>
<value> String <value>
<category> class <category>
</identifier>
<identifier>
<value> message <value>
<category> argument </category>
<defined> defined <defined>
<kind> argument </kind>
<index> 0 </index>
</identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<identifier>
<value> String <value>
<category> class <category>
</identifier>
<identifier>
<value> ret <value>
<category> var </category>
<defined> defined <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier>
<value> c <value>
<category> var </category>
<defined> defined <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<value> ret <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<value> String <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> new <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 80 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier>
<value> Output <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> printString <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier>
<value> message <value>
<category> argument <category>
<defined> used <defined>
<kind> argument </kind>
<index> 0 </index>
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<value> c <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<value> readChar <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<value> c <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<identifier>
<value> String <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> newLine <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier>
<value> ret <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<value> c <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<identifier>
<value> String <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> backSpace <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier>
<value> ret <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> . </symbol>
<identifier>
<value> eraseLastChar <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier>
<value> ret <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> . </symbol>
<identifier>
<value> appendChar <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier>
<value> c <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier>
<value> readInt <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<parameterList>
<identifier>
<value> String <value>
<category> class <category>
</identifier>
<identifier>
<value> message <value>
<category> argument </category>
<defined> defined <defined>
<kind> argument </kind>
<index> 0 </index>
</identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<identifier>
<value> String <value>
<category> class <category>
</identifier>
<identifier>
<value> str <value>
<category> var </category>
<defined> defined <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier>
<value> ret <value>
<category> var </category>
<defined> defined <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<value> str <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<value> Keyboard <value>
<category> class <category>
</identifier>
<symbol> . </symbol>
<identifier>
<value> readLine <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier>
<value> message <value>
<category> argument <category>
<defined> used <defined>
<kind> argument </kind>
<index> 0 </index>
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<value> ret <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<value> str <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 0 </index>
</identifier>
<symbol> . </symbol>
<identifier>
<value> intValue <value>
<category> subroutine <category>
</identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier>
<value> ret <value>
<category> var <category>
<defined> used <defined>
<kind> var </kind>
<index> 1 </index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
