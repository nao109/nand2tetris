// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoTothe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i;

        let color = true;

        let twoTothe = Array.new(16);
        let twoTothe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoTothe[i] = twoTothe[i - 1] + twoTothe[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(16384 + i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int xmod16, address;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) { do Sys.error(7); }

        let address = 16384 + (y * 32) + (x / 16);
        let xmod16 = x - (x / 16 * 16);

        if (color) { do Memory.poke(address, Memory.peek(address) | twoTothe[xmod16]); }
        else { do Memory.poke(address, Memory.peek(address) & twoTothe[xmod16]); }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy;
        var int a, b, adyMinusbdx;

        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255)) { do Sys.error(8); }
        if ((x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)) { do Sys.error(8); }

        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        if (dx = 0) {
            while (~(b = dy)) {
                do Screen.drawPixel(x, y + b);
                if (dy > 0) { let b = b + 1; }
                else { let b = b - 1; }
            }
            return;
        }
        if (dy = 0) {
            while (~(a = dx)) {
                do Screen.drawPixel(x + a, y);
                if (dx > 0) { let a = a + 1; }
                else { let a = a - 1; }
            }
            return;
        }

        while (~(a = dx) & ~(b = dy)) {
            do Screen.drawPixel(x + a, y + b);
            if (adyMinusbdx < 0) {
                if (dx > 0) {
                    if (dy > 0) {
                        let a = a + 1;
                        let adyMinusbdx = adyMinusbdx + dy;
                    }
                    else {
                        let b = b - 1;
                        let adyMinusbdx = adyMinusbdx + dx;
                    }
                }
                else {
                    if (dy > 0) {
                        let b = b + 1;
                        let adyMinusbdx = adyMinusbdx - dx;
                    }
                    else {
                        let a = a - 1;
                        let adyMinusbdx = adyMinusbdx - dy;
                    }
                }
            }
            else {
                if (dx > 0) {
                    if (dy > 0) {
                        let b = b + 1;
                        let adyMinusbdx = adyMinusbdx - dx;
                    }
                    else {
                        let a = a + 1;
                        let adyMinusbdx = adyMinusbdx + dy;
                    }
                }
                else {
                    if (dy > 0) {
                        let a = a - 1;
                        let adyMinusbdx = adyMinusbdx - dy;
                    }
                    else {
                        let b = b - 1;
                        let adyMinusbdx = adyMinusbdx + dx;
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y, x;

        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255)) { do Sys.error(9); }
        if ((x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)) { do Sys.error(9); }
        if ((x1 > x2) | (y1 > y2)) { do Sys.error(9); }

        let y = y1;
        while (~(y > y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx, r2;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) { do Sys.error(12); }
        if ((r < 0) | (r > 181)) { do Sys.error(13); }

        let dy = 0;
        let r2 = r * r;
        while (~(dy > r)) {
            let dx = Math.sqrt(r2 - (dy * dy));

            if ((x - dx < 0) | (x - dx > 511)) { do Sys.error(13); }
            if ((x + dx < 0) | (x + dx > 511)) { do Sys.error(13); }
            if ((y - dy < 0) | (y - dy > 255)) { do Sys.error(13); }
            if ((y + dy < 0) | (y + dy > 255)) { do Sys.error(13); }

            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            do Screen.drawLine(x - dx, y - dy, x + dx, y - dy);
            let dy = dy + 1;
        }
        return;
    }
}
