<tokens>
<keyword> class </keyword>
<identifier> Memory </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> ram </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> heap </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> init </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ram </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> heap </identifier>
<symbol> = </symbol>
<integerConstant> 2048 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> heap </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 14334 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> heap </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> peek </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> ram </identifier>
<symbol> [ </symbol>
<identifier> address </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> poke </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ram </identifier>
<symbol> [ </symbol>
<identifier> address </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> value </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> alloc </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> block </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> base </identifier>
<symbol> , </symbol>
<identifier> length </identifier>
<symbol> , </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> error </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> block </identifier>
<symbol> = </symbol>
<identifier> heap </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> block </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> block </identifier>
<symbol> = </symbol>
<identifier> block </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> block </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> block </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 16384 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> error </identifier>
<symbol> ( </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> base </identifier>
<symbol> = </symbol>
<identifier> block </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> length </identifier>
<symbol> = </symbol>
<identifier> block </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> block </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> block </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> block </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> block </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> block </identifier>
<symbol> [ </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> length </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> block </identifier>
<symbol> [ </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> base </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<integerConstant> 16384 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<identifier> Array </identifier>
<identifier> o </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> segment </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> length </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> segment </identifier>
<symbol> = </symbol>
<identifier> o </identifier>
<symbol> - </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> segment </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> segment </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> segment </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
